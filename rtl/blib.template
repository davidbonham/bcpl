// Standard BCPL Run-time library
// ------------------------------
//
// This is the part of the run-time library that is written in BCPL rather
// than the assembler components that live in bcplmain.

SECTION "BLIB"

GET "libhdr"

// -----------------------------------------------------------------------------
// OFFICIAL BLIB
// -----------------------------------------------------------------------------
//
// We put randno first because it is declared via LET rather than AND

%insert randno
%insert write_format
%insert capitalch
%insert writedz
%insert writed
%insert writen
%insert writeoct
%insert writehex
%insert writebin
%insert newline
%insert compch
%insert compstring
%insert getkeylen
%insert rdargs
%insert rdargs2
%insert rdargslen
%insert rditem
%insert findarg
%insert findarglen
%insert string_to_number
%insert copystring
%insert copy_words
%insert clear_words
%insert copy_bytes
%insert readn
%insert findinput
%insert pathfindinput
%insert findoutput
%insert findinoutput
%insert findupdate
%insert findappend
%insert endread
%insert endwrite



// -----------------------------------------------------------------------------
// Local implementations
// -----------------------------------------------------------------------------

// We don't yet support the BCPL language feature that arguments to routines
// have consecutive stack addresses and so can be treated as a vector so we
// need our owr writef wrapper.
LET writef(format, a, b, c, d, e, f, g, h, i, j) BE $(

    LET argvec = VEC 9
    argvec!0 := a
    argvec!1 := b
    argvec!2 := c
    argvec!3 := d
    argvec!4 := e
    argvec!5 := f
    argvec!6 := g
    argvec!7 := h
    argvec!8 := i
    argvec!9 := j
    write_format(format, @argvec)
$)

// To provide simple cintpos support, we implement sys in BCPL as part
// of BLIB

LET sys_flt(operation, a, b, c, d) = VALOF $(
    LET result = ?
    SWITCHON operation INTO $(

        CASE fl_avail: result := TRUE;                                  ENDCASE

        CASE fl_mk:
            // a=mantissa, b=exponent
            result := FLOAT a
            WHILE b > 0 DO $( result #*:= 10.0; b -:= 1 $)
            WHILE b < 0 DO $( result #/:= 10.0; b +:= 1 $)
        ENDCASE

        CASE fl_unmk: $(
            LET m, e, s = a, 0, m #>= 0.0 -> 1, -1
            IF s = -1 DO m :=  #- m
            WHILE m #>= 10.0 DO $( m #/:= 10.0; e +:= 1 ; writef("%10.5f %n*n", m, e) $)
            WHILE m # <= 1.0 DO $( m #*:= 10.0; e -:= 1 ; writef("%10.5f %n*n", m, e) $)
            result2 := e
            result := s = 1 -> m, #-m
        $)
        ENDCASE

        CASE fl_float: result := FLOAT a;                               ENDCASE
        CASE fl_fix:   result := FIX a;                                 ENDCASE
        CASE fl_abs:   result := a #>= 0.0 -> a, #- a;                  ENDCASE
        CASE fl_mul:   result := a #* b;                                ENDCASE
        CASE fl_div:   result := a #/ b;                                ENDCASE
        CASE fl_add:   result := a #+ b;                                ENDCASE
        CASE fl_sub:   result := a #- b;                                ENDCASE
        CASE fl_pos:   result := a;                                     ENDCASE
        CASE fl_neg:   result := #- a;                                  ENDCASE
        CASE fl_eq:    result := a #= b;                                ENDCASE
        CASE fl_ne:    result := a #~= b;                               ENDCASE
        CASE fl_gr:    result := a #> b;                                ENDCASE
        CASE fl_ge:    result := a #>= b;                               ENDCASE
        CASE fl_ls:    result := a #< b;                                ENDCASE
        CASE fl_le:    result := a #<= b;                               ENDCASE

        DEFAULT:
            writef("ERROR sys_flt operation=%n a=%16x b=%16x c=%16x d=%16x*n", operation, a, b, c, d)
            stop(1)
    $)
    RESULTIS result

$)

LET sys(package, operation, a, b, c, d) = VALOF $(
    LET result = ?
    SWITCHON package INTO $(
        CASE Sys_sardch: result := rdch();                              ENDCASE
        CASE Sys_sawrch: result := wrch(operation);                     ENDCASE
        CASE Sys_flt:    result := sys_flt(operation, a, b, c, d);      ENDCASE
        DEFAULT:
            writef("ERROR sys package=%n operation=%n a=%16x b=%16x c=%16x d=%16x*n", package, operation, a, b, c, d)
            stop(1)
    $)
    RESULTIS result
$)

AND writes(s) BE FOR i = 1 TO s%0 DO wrch(s%i)

// A stub to support rditem below
LET deplete(stream) BE stop(1)

