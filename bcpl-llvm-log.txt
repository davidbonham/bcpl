Start with a new ~/official_bcpl_release
Edit the cintsys Makefile to comment out the optional libraries eg sound
make clean64
make sys64

set up
   bcpl-llvm
       src
           bcpl-llvm.b   the wrapper including the fe and my cg
           llvmcg.b      my cg
           c-api         holds the generated source for the LLVM C API 
       scripts
           setup.sh      set up for official_bcpl_release cintsys
           genif.py      generates the LLVM C API


Note that the comments about not needing all of the BCPL64* enviroment
variables in MR's README are lies. My setup defines them because it 
needs to.

Now I can compile hello.b to ocode in /tmp

done -- building of c api files

export BL_ROOT=/home/david/bcpl-llvm
python3 $BL_ROOT/scripts/genif.py <$BL_ROOT/src/selected_api.h $BL_ROOT/src/c-api/autogen

-- building of my own cintsys64 including the c-api

Let's not modify the official distribution, we'll just copy files from there and add
our own. We'll need to take a copy of extfn64.c to extend.

Problem: the llvm-c include files are not present. It looks like the llvm package
doesn't contain as much as I need and I need to build the llvm libraries myself.

Download and untar llvm-project-17.0.6
tar --xz -x -v -f llvm...
cd llvm-project-17
sudo apt install cmake
cmake -S llvm -B build -G 'Unix Makefiles' -DCMAKE_BUILD_TYPE=Debug
make -C build

The above seemed to be using the clang++ in /usr/lib/llvm-17/bin so
the earlier 

   22  sudo apt install llvm-toolchain-jammy

might be needed.


My own cintsys64 now linking and running in bin. 

Assumptions:

The official distribution is in ~/official_bcpl_release and has been
built - the scripts in my scripts directory define environment 
variables to allow the location to be changed

There is a built version of LLVM 


Problems:

1. Removal of optimisation because of pass manager rework

Look at the git history for the passes we removed:

LLVMAddPromoteMemoryToRegisterPass
LLVMAddReassociatePass
LLVMAddGVNPass
LLVMAddCFGSimplificationPass
LLVMAddConstantPropagatePass
LLVMAddPartiallyInlineLibCallsPass

It looks like everything was built against the ubuntu apt installed llvm-17?
In which case I don't need my own build unless I need to debug.

To make a debug build:

tar --xz -x -f '/mnt/c/Users/David Bonham/Downloads/llvm-project-17.0.6.src.tar.xz'
mkdir llvm-build
cd llvm-build
cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DLLVM_TARGETS_TO_BUILD=host ~/llvm-project-17.0.6.src/llvm

Currently compiling the llvm bcpl compiler like this, to get the syn and trn headers:

env BCPL64HDRS=/home/david/official_bcpl_release/BCPL/cintcode:bcpl-llvm/src:$BCPL64HDRS ~/bcpl-llvm/bin/cintsys64  -c  bcpl t64 gdefs bcpl-llvm/src/bcpl-llvm.b to mybcpl

and running it like this:

env BCPL64HDRS=/home/david/official_bcpl_release/BCPL/cintcode:bcpl-llvm/src:$BCPL64HDRS gdb ~/bcpl-llvm/bin/cintsys64 # -f -v -c  mybcpl /tmp/foo.b to foo.ll

to discover that arguments are being passed as 0.

---------------------------------------------------------------
To push my repo to github I did:

1. Login to github 
2. Create a new repo bcpl
3. In bcpl-llvm directory:
4. git branch --move master main
5. git remote add origin https://github.com/davidbonham/bcpl.git

Now at github.org, add a personal access token that expires one day with scopes repo and read:org

6. Install githup app: sudo apt install gh
7. Start a session: 

bcpl-llvm> gh auth login
? What account do you want to log into? GitHub.com
? What is your preferred protocol for Git operations? HTTPS
? Authenticate Git with your GitHub credentials? Yes
? How would you like to authenticate GitHub CLI? Paste an authentication token
Tip: you can generate a Personal Access Token here https://github.com/settings/tokens
The minimum required scopes are 'repo', 'read:org', 'workflow'.
? Paste your authentication token: ****************************************
- gh config set -h github.com git_protocol https
✓ Configured git protocol
✓ Logged in as davidbonham

8. git push -u origin main

and all is done.

