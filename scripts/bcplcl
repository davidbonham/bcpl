#!/usr/bin/env bash

usage()
{
    echo "usage: tbd"
}


TEMP=`getopt --name bcpl --options OScdmo:vk --longoptions optimise,source,compile,dryrun,map,object:,verbose,keep -- "$@"`
eval set -- "$TEMP"

# Path to installed run-time
export RTL=$BL_ROOT/x86-rtl
export PATH=$BL_ROOT/bin:$PATH
export X86HDRS=$RTL

clang_prefix=$RTL/bcplinit.s
clang_suffix="$RTL/blib.ll $RTL/bcplmain.c"
clang_inputs=""
optimise=-O0
source=""
compile=""
verbose=0
dryrun=0
object=""
object_path=""
map=0
keep=0
map_name=a.out.map

perform()
{
    cmd=$1
    if [ $verbose -eq 1 ] 
    then
        echo $cmd
    fi
    if [ $dryrun -eq 0 ]
    then
        eval $cmd
    else
        echo $cmd
    fi
}

# Process all of the options before any files

while true
do
    case "$1" in
        -O|--optimise)
            optimise=-O3
            shift
            ;;
        -S|--source)
            # source only means we aren't going to compile or link so remove bcplinit.s
            source="-S"
            clang_prefix=""
            clang_suffix=""
            shift
            ;;
        -c|--compile)
            # compiling means we aren't going to link so remove bcplinit.s
            compile="-c"
            clang_prefix=""
            clang_suffix=""
            shift
            ;;
        -d|--dryrun)
            dryrun=1
            shift
            ;;     
        -m|--map)
            map=1
            shift
            ;; 
        -o|--object)
            object="-o $2"
            map_name="$2.map"
            object_path=$2
            shift 2
            ;;
        -v|--verbose)
            verbose=1
            shift
            ;;
        -k|--keep)
            keep=1
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo unrecognised option: $1
            break
    esac
done

if [ $map -eq 1 ]
then
    map="-Wl,-Map=$map_name"
else
    map=""
fi

# If we're not going to keep our outputs, place them in a temporary directory
# that will be cleaned up on exit
if [ $keep -eq 0 ]
then
    WORKDIR="$(mktemp -d)"
    trap 'rm -rf -- "$WORKDIR"' EXIT
else
    WORKDIR=.
fi

declare -a input_queue
input_queue=("$@")
index=0
linker_objects=""

while [ $index -lt ${#input_queue[@]} ]
do
    input="${input_queue[$index]}"
    entry=$(basename -- "$input")
    suffix="${entry##*.}"
    name="${entry%.*}"

    case "$suffix" in

    b)
        ll_path=${WORKDIR}/${name}.ll
        #perform "cintsys64 -c $BL_ROOT/bin/mybcpl t64 noselst $input to $ll_path"
        perform "$BL_ROOT/bin/bcpl t64  $input to ${ll_path} HDRS X86HDRS"
        input_queue+=(${ll_path})
        ;;

    ll)
        o_path=${WORKDIR}/${name}.o
        perform "llc --relocation-model=pic --frame-pointer=all --filetype=obj ${optimise} ${input} -o ${o_path}"
        input_queue+=(${o_path})
        ;;

    s)
        o_path=${WORKDIR}/${name}.o
        perform "as -o ${o_path} ${input}"
        input_queue+=(${o_path})
        ;;

    o)
        linker_objects="${linker_objects} ${input}"
        ;;

    esac
    ((index++))
done

perform "ld -z noexecstack x86-rtl/bcplinit.o x86-rtl/blib.o ${linker_objects} ${object} ${map}"
