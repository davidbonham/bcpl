{  "name": "bcpl",
   "scopeName": "source.bcpl",
   "fileTypes": ["b", "bcpl"],

   "foldingStartMarker": "(\\{|\\$\\()\\s*$",
   "foldingStopMarker": "^\\s*(\\}||$\\))",

   "patterns": [

      { "name": "comment.line.double-slash.bcpl",
        "begin": "//",
        "end":  "\n"
      },

      { "name": "comment.block.bcpl",
        "begin": "/\\*",
        "end":  "\\*/",
        "beginCaptures": {
          "0": { "name": "punctuation.definition.comment.begin.bcpl" }
        },
        "endCaptures": {
          "0": { "name": "punctuation.definition.comment.end.bcpl" }
        }
      },

      { "name": "keyword.control.bcpl",
        "match": "\\b(BREAK|BY|CASE|DEFAULT|DO|ELSE|ENDCASE|FINISH|FOR|GOTO|IF|INTO|LOOP|REPEAT|REPEATUNTIL|REPEATWHILE|RESULTIS|RETURN|SWITCHON|TEST|THEN|TO|UNLESS|UNTIL|WHILE)\\b"
      },

      { "name": "keyword.other.bcpl",
        "match": "\\b(AND|BE|EXTERNAL|GET|GLOBAL|LET|MANIFEST|NEEDS|SECTION|STATIC|TABLE|VALOF|VEC)\\b"
      },

      { "name": "keyword.operator.bcpl",
        "match": "(@|!|::|:=|=|~=|<=|>=|<|>|<<|>>|/|->|~|\\+|-|\\*|&|\\||%|\\b(EQ|FIX|FLOAT|GE|GR|LE|LS|LOGOR|LOGAND|LSHIFT|LV|NE|NOT|OF|OR|RSHIFT|RV|REM|SLCT|EQV|NEQV)\\b)"
      },

      { "name": "constant.language.bcpl",
        "match": "(\\?|\\b(TRUE|FALSE|NIL)\\b)"
      },

      { "name": "constant.character.bcpl",
        "match": "'.'"
      },

      { "name": "invalid.illegal.bcpl",
        "match": "'..+'"
      },

      { "name": "support.function.bcpl",
        "match": "\\b(findinput|findoutput|start|selectinput|selectoutput|endread|endwrite|rewind|input|output|rdch|unrdch|readn|wrch|writes|writed|writen|writeoct|writehex|writef|newline|newpage|stop|level|longjump|aptovec|unpackstring|packstring|getbyte|putbyte)\\b"
      },

      { "name": "support.variable.bcpl",
        "match": "\\b(RESULT2)\\b"
      },

      { "name": "support.constant.bcpl",
        "match": "\\b(ENDSTREAMCH|BYTESPERWORD|FIRSTFREEGLOBAL|BITSPERWORD|MAXINT|MININT)\\b"
      },

      { "name": "string.quoted.double.bcpl",
        "begin": "\"",
        "end": "\"",
        "patterns": [
           { "name": "constant.character.escape.bcpl",
             "match": "\\*."
           }
        ]
      }
   ]
}

